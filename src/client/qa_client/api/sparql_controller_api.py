"""
    QAnswer: Api Documentation

    APIs provided by QAnswer  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: info@qanswer.eu
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from qa_client.api_client import ApiClient, Endpoint as _Endpoint
from qa_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from qa_client.model.sparqlto_user import SPARQLToUser


class SparqlControllerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.sparql_compare_answers_using_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'JWT'
                ],
                'endpoint_path': '/api/sparql/sparqlCompareAnswers',
                'operation_id': 'sparql_compare_answers_using_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'sparql1',
                    'kb1',
                    'kb2',
                    'sparql2',
                    'user',
                ],
                'required': [
                    'sparql1',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sparql1':
                        (str,),
                    'kb1':
                        (str,),
                    'kb2':
                        (str,),
                    'sparql2':
                        (str,),
                    'user':
                        ([str],),
                },
                'attribute_map': {
                    'sparql1': 'sparql1',
                    'kb1': 'kb1',
                    'kb2': 'kb2',
                    'sparql2': 'sparql2',
                    'user': 'user',
                },
                'location_map': {
                    'sparql1': 'query',
                    'kb1': 'query',
                    'kb2': 'query',
                    'sparql2': 'query',
                    'user': 'query',
                },
                'collection_format_map': {
                    'user': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.sparql_compare_sparql_using_get_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'JWT'
                ],
                'endpoint_path': '/api/sparql/sparqlCompare',
                'operation_id': 'sparql_compare_sparql_using_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'sparql1',
                    'kb1',
                    'kb2',
                    'sparql2',
                    'user',
                ],
                'required': [
                    'sparql1',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sparql1':
                        (str,),
                    'kb1':
                        (str,),
                    'kb2':
                        (str,),
                    'sparql2':
                        (str,),
                    'user':
                        ([str],),
                },
                'attribute_map': {
                    'sparql1': 'sparql1',
                    'kb1': 'kb1',
                    'kb2': 'kb2',
                    'sparql2': 'sparql2',
                    'user': 'user',
                },
                'location_map': {
                    'sparql1': 'query',
                    'kb1': 'query',
                    'kb2': 'query',
                    'sparql2': 'query',
                    'user': 'query',
                },
                'collection_format_map': {
                    'user': 'multi',
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.sparql_to_user_using_get_endpoint = _Endpoint(
            settings={
                'response_type': (SPARQLToUser,),
                'auth': [
                    'JWT'
                ],
                'endpoint_path': '/api/sparql/sparqlToUser',
                'operation_id': 'sparql_to_user_using_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset',
                    'sparql',
                    'user',
                    'lang',
                ],
                'required': [
                    'dataset',
                    'sparql',
                    'user',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset':
                        (str,),
                    'sparql':
                        (str,),
                    'user':
                        (str,),
                    'lang':
                        (str,),
                },
                'attribute_map': {
                    'dataset': 'dataset',
                    'sparql': 'sparql',
                    'user': 'user',
                    'lang': 'lang',
                },
                'location_map': {
                    'dataset': 'query',
                    'sparql': 'query',
                    'user': 'query',
                    'lang': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def sparql_compare_answers_using_get(
        self,
        sparql1,
        **kwargs
    ):
        """Compares two sparql query based on the answer set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sparql_compare_answers_using_get(sparql1, async_req=True)
        >>> result = thread.get()

        Args:
            sparql1 (str): sparql1

        Keyword Args:
            kb1 (str): kb1. [optional]
            kb2 (str): kb2. [optional]
            sparql2 (str): sparql2. [optional]
            user ([str]): user. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sparql1'] = \
            sparql1
        return self.sparql_compare_answers_using_get_endpoint.call_with_http_info(**kwargs)

    def sparql_compare_sparql_using_get(
        self,
        sparql1,
        **kwargs
    ):
        """Compares two sparql query based on the structure  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sparql_compare_sparql_using_get(sparql1, async_req=True)
        >>> result = thread.get()

        Args:
            sparql1 (str): sparql1

        Keyword Args:
            kb1 (str): kb1. [optional]
            kb2 (str): kb2. [optional]
            sparql2 (str): sparql2. [optional]
            user ([str]): user. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sparql1'] = \
            sparql1
        return self.sparql_compare_sparql_using_get_endpoint.call_with_http_info(**kwargs)

    def sparql_to_user_using_get(
        self,
        dataset,
        sparql,
        user,
        **kwargs
    ):
        """Convertes a SPARQL query in a human readable interpretation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sparql_to_user_using_get(dataset, sparql, user, async_req=True)
        >>> result = thread.get()

        Args:
            dataset (str): dataset
            sparql (str): sparql
            user (str): user

        Keyword Args:
            lang (str): lang. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SPARQLToUser
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dataset'] = \
            dataset
        kwargs['sparql'] = \
            sparql
        kwargs['user'] = \
            user
        return self.sparql_to_user_using_get_endpoint.call_with_http_info(**kwargs)

