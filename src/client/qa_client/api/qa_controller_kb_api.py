"""
    QAnswer: Api Documentation

    APIs provided by QAnswer  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: info@qanswer.eu
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from qa_client.api_client import ApiClient, Endpoint as _Endpoint
from qa_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from qa_client.model.qa_result import QaResult


class QaControllerKbApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.gerbil_using_post_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type,)},),
                'auth': [
                    'JWT'
                ],
                'endpoint_path': '/api/gerbil',
                'operation_id': 'gerbil_using_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'kb',
                    'lang',
                    'user',
                ],
                'required': [
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'kb':
                        (str,),
                    'lang':
                        (str,),
                    'user':
                        ([str],),
                },
                'attribute_map': {
                    'query': 'query',
                    'kb': 'kb',
                    'lang': 'lang',
                    'user': 'user',
                },
                'location_map': {
                    'query': 'query',
                    'kb': 'query',
                    'lang': 'query',
                    'user': 'query',
                },
                'collection_format_map': {
                    'user': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.qa_full_interpretation_using_get_endpoint = _Endpoint(
            settings={
                'response_type': (QaResult,),
                'auth': [
                    'JWT'
                ],
                'endpoint_path': '/api/qa/fullInterpretation',
                'operation_id': 'qa_full_interpretation_using_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'question',
                    'id',
                    'kb',
                    'lang',
                    'timeout',
                    'user',
                ],
                'required': [
                    'question',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'question':
                        (str,),
                    'id':
                        (int,),
                    'kb':
                        ([str],),
                    'lang':
                        ([str],),
                    'timeout':
                        (int,),
                    'user':
                        ([str],),
                },
                'attribute_map': {
                    'question': 'question',
                    'id': 'id',
                    'kb': 'kb',
                    'lang': 'lang',
                    'timeout': 'timeout',
                    'user': 'user',
                },
                'location_map': {
                    'question': 'query',
                    'id': 'query',
                    'kb': 'query',
                    'lang': 'query',
                    'timeout': 'query',
                    'user': 'query',
                },
                'collection_format_map': {
                    'kb': 'multi',
                    'lang': 'multi',
                    'user': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.qa_full_using_get_endpoint = _Endpoint(
            settings={
                'response_type': (QaResult,),
                'auth': [
                    'JWT'
                ],
                'endpoint_path': '/api/qa/full',
                'operation_id': 'qa_full_using_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'question',
                    'id',
                    'kb',
                    'lang',
                    'timeout',
                    'user',
                ],
                'required': [
                    'question',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'question':
                        (str,),
                    'id':
                        (int,),
                    'kb':
                        ([str],),
                    'lang':
                        ([str],),
                    'timeout':
                        (int,),
                    'user':
                        ([str],),
                },
                'attribute_map': {
                    'question': 'question',
                    'id': 'id',
                    'kb': 'kb',
                    'lang': 'lang',
                    'timeout': 'timeout',
                    'user': 'user',
                },
                'location_map': {
                    'question': 'query',
                    'id': 'query',
                    'kb': 'query',
                    'lang': 'query',
                    'timeout': 'query',
                    'user': 'query',
                },
                'collection_format_map': {
                    'kb': 'multi',
                    'lang': 'multi',
                    'user': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.qa_sparql_using_get_endpoint = _Endpoint(
            settings={
                'response_type': (QaResult,),
                'auth': [
                    'JWT'
                ],
                'endpoint_path': '/api/qa/sparql',
                'operation_id': 'qa_sparql_using_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'question',
                    'id',
                    'kb',
                    'lang',
                    'user',
                ],
                'required': [
                    'question',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'question':
                        (str,),
                    'id':
                        (int,),
                    'kb':
                        ([str],),
                    'lang':
                        ([str],),
                    'user':
                        ([str],),
                },
                'attribute_map': {
                    'question': 'question',
                    'id': 'id',
                    'kb': 'kb',
                    'lang': 'lang',
                    'user': 'user',
                },
                'location_map': {
                    'question': 'query',
                    'id': 'query',
                    'kb': 'query',
                    'lang': 'query',
                    'user': 'query',
                },
                'collection_format_map': {
                    'kb': 'multi',
                    'lang': 'multi',
                    'user': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def gerbil_using_post(
        self,
        query,
        **kwargs
    ):
        """Takes a question and returns the answer in the format specified by the GERBIL API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.gerbil_using_post(query, async_req=True)
        >>> result = thread.get()

        Args:
            query (str): query

        Keyword Args:
            kb (str): kb. [optional] if omitted the server will use the default value of "wikidata"
            lang (str): lang. [optional] if omitted the server will use the default value of "en"
            user ([str]): user. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type,)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['query'] = \
            query
        return self.gerbil_using_post_endpoint.call_with_http_info(**kwargs)

    def qa_full_interpretation_using_get(
        self,
        question,
        **kwargs
    ):
        """Takes a question and returns the SPARQL query, the answer, contextual information about the answer and the interpretation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.qa_full_interpretation_using_get(question, async_req=True)
        >>> result = thread.get()

        Args:
            question (str): question

        Keyword Args:
            id (int): id. [optional]
            kb ([str]): kb. [optional]
            lang ([str]): lang. [optional]
            timeout (int): timeout. [optional] if omitted the server will use the default value of 5
            user ([str]): user. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            QaResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['question'] = \
            question
        return self.qa_full_interpretation_using_get_endpoint.call_with_http_info(**kwargs)

    def qa_full_using_get(
        self,
        question,
        **kwargs
    ):
        """Takes a question and returns the SPARQL query, the answer and contextual information about the answer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.qa_full_using_get(question, async_req=True)
        >>> result = thread.get()

        Args:
            question (str): question

        Keyword Args:
            id (int): id. [optional]
            kb ([str]): kb. [optional]
            lang ([str]): lang. [optional]
            timeout (int): timeout. [optional] if omitted the server will use the default value of 5
            user ([str]): user. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            QaResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['question'] = \
            question
        return self.qa_full_using_get_endpoint.call_with_http_info(**kwargs)

    def qa_sparql_using_get(
        self,
        question,
        **kwargs
    ):
        """Takes a question and returns the corresponding SPARQL query.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.qa_sparql_using_get(question, async_req=True)
        >>> result = thread.get()

        Args:
            question (str): question

        Keyword Args:
            id (int): id. [optional]
            kb ([str]): kb. [optional]
            lang ([str]): lang. [optional]
            user ([str]): user. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            QaResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['question'] = \
            question
        return self.qa_sparql_using_get_endpoint.call_with_http_info(**kwargs)

